To implement a friend request system in a React app using Firebase, you'll need to set up Firebase Authentication for user authentication and Firebase Firestore or Firebase Realtime Database for storing friend requests and user data. Below is a basic outline of the steps you can follow:

### Step 1: Set up Firebase in your React App

Make sure you have Firebase installed and configured in your React app. You can do this by installing the Firebase package and configuring it with your Firebase project credentials.

```bash
npm install firebase
```

Create a Firebase configuration file (e.g., `firebaseConfig.js`) with your Firebase project configuration:

```javascript
// firebaseConfig.js
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_AUTH_DOMAIN",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_STORAGE_BUCKET",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID",
};

export default firebaseConfig;
```

### Step 2: Set up Firebase Authentication

Set up Firebase Authentication to handle user sign-up, sign-in, and sign-out. Refer to the Firebase documentation for more details on how to set this up: [Firebase Authentication](https://firebase.google.com/docs/auth).

### Step 3: Create a Firestore Collection for Friend Requests

If you're using Firestore, create a collection to store friend requests. Each document in the collection can represent a friend request.

```javascript
// Assuming you have Firebase initialized in your app
import { firestore } from 'firebase/app';

// Add this function to send a friend request
const sendFriendRequest = async (senderId, receiverId) => {
  const friendRequestsCollection = firestore().collection('friendRequests');

  try {
    await friendRequestsCollection.add({
      senderId,
      receiverId,
      status: 'pending', // You can add more statuses like 'accepted' or 'rejected'
    });
    console.log('Friend request sent successfully');
  } catch (error) {
    console.error('Error sending friend request:', error);
  }
};
```

### Step 4: Display Friend Requests

You can create a component to display pending friend requests and allow the user to accept or reject them.

```javascript
// Fetch and display friend requests
const FriendRequests = () => {
  // Fetch friend requests based on the user's ID
  // Display the list of friend requests and provide options to accept or reject

  return (
    <div>
      {/* Display friend requests */}
      {/* Accept or reject buttons */}
    </div>
  );
};
```

### Step 5: Handle Friend Request Actions

Implement functions to handle actions like accepting or rejecting friend requests.

```javascript
// Handle friend request actions
const handleAcceptRequest = async (requestId) => {
  // Update the status of the friend request to 'accepted' in Firestore
};

const handleRejectRequest = async (requestId) => {
  // Update the status of the friend request to 'rejected' in Firestore
};
```

### Note:

This is a basic outline, and you'll need to adapt it based on your specific requirements and the structure of your app. Additionally, you might want to add security rules in Firestore to control who can read and write to the friend requests collection.